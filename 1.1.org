#+TITLE: Chapter 1.1 Elements of Programming

* Exercise 1.1.1
Type expressions and let the interpreter evaluate
** 1
#+BEGIN_SRC elisp
10
#+END_SRC

#+RESULTS:
: 10
** 2
#+BEGIN_SRC elisp
(+ 5 3 4)
#+END_SRC

#+RESULTS:
: 12
** 3
#+BEGIN_SRC scheme
(- 9 1)
#+END_SRC

#+RESULTS:
: 8
** 4
#+BEGIN_SRC elisp
(/ 6 2)
#+END_SRC

#+RESULTS:
: 3
** 5
#+BEGIN_SRC elisp
(+
 (* 2 4)
 (- 4 6))
#+END_SRC

#+RESULTS:
: 6

* Exercise 1.2
Convert a mathematical expression into prefix form
#+BEGIN_SRC elisp
(/
 (+
  5
  4
  (-
   2
   3
   (+
    6
    (/ 4.0 5))))
 (*
  3
  (- 6 2)
  (- 2 7)))
#+END_SRC

#+RESULTS:
: -0.020000000000000004

* Exercise 1.1.2
 Below is a sequence of expressions.
 What is the result printed by the interpreter in response to each expression?
 Assume that the sequence is to be evaluated in the order in which it is
 presented.
 #+BEGIN_SRC scheme
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
 #+END_SRC

 #+RESULTS:
 : 19

* Exercise 1.3




Define a procedure that takes three numbers as arguments and returns the sum of
the squares of the two larger numbers.
#+BEGIN_SRC scheme
(define (square-sum x y)
  (+
   (* x x)
   (* y y)))

(define (square-sum-larger a b c)
  (cond
    ((and (>= a c) (>= b c))
      (square-sum a b))
    ((and (>= a b) (>= c b))
      (square-sum a c))
    ((and (>= b a) (>= c a))
      (square-sum b c))))

(square-sum-larger 3 2 1)
#+END_SRC

#+RESULTS:
: 13
* Exercise 1.4
 Observe that our model of evaluation allows for combinations whose operators
 are compound expressions. Use this observation to describe the behavior of the
 following procedure:
 #+BEGIN_SRC scheme
(define (mystery a b)
  ((if (> b 0) + -) a b))
(list
 (mystery 1 3)
 (mystery 1 2)
 (mystery 1 -2))

 #+END_SRC

 #+RESULTS:
 | 3 | 3 |

 Describe the behavior of the procedure by selecting which descriptions are
 equivalent. If you think that the procedure definition is invalid, choose the
 reasons why.
** Answer
mystery adds the absoute value of b to a.

* Exercise 1.5

 Ben Bitdiddle has invented a test to determine whether the interpreter he is
 faced with is using applicative-order evaluation or normal-order evaluation.
 What behavior will Ben observe with an interpreter that uses applicative-order
 evaluation?
 What behavior will he observe with an interpreter that uses normal-order
 evaluation?
 #+BEGIN_SRC scheme
(define (p) (p))
(define (test x y)
  (if (= x 0)
      0
      y))
(test 0 (p))
 #+END_SRC

 #+RESULTS:

 Answer: applicative-order results in infinite recursion, normal-order results
 in 0
* Exercise 1.6
Alyssa P. Hacker doesn’t see why if needs to be provided as a special form. “Why
can’t I just define it as an ordinary procedure in terms of cond?” she asks.
Alyssa’s friend Eva Lu Ator claims this can indeed be done, and she defines a
new version of if:
#+BEGIN_SRC scheme
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+END_SRC

#+RESULTS:
: #<void>

#+BEGIN_SRC scheme
(new-if (= 2 3) 0 5)
#+END_SRC

#+RESULTS:

Delighted, Alyssa uses new-if to rewrite the square-root program:
#+BEGIN_SRC scheme
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+END_SRC
What happens when Alyssa attempts to use this to compute square roots? Explain.

Answer: Infinite recursion.  All branches evaluated in applicative-mode since
the special form if was not used.

* Exercise 1.7
The good-enough? test used in computing square roots will not be very effective
for finding the square roots of very small numbers. Also, in real computers,
arithmetic operations are almost always performed with limited precision. This
makes our test inadequate for very large numbers. Explain these statements, with
examples showing how the test fails for small and large numbers.
#+BEGIN_SRC scheme
(define (average x y) (/ (+ x y) 2))
(define (square x) (* x x))
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))
(define small-number 0.00004)
(square (sqrt small-number))
#+END_SRC

#+RESULTS:
: 0.001003311648341749


An alternative strategy for implementing good-enough? is to watch how guess
changes from one iteration to the next and to stop when the change is a very
small fraction of the guess. Design a square-root procedure that uses this kind
of end test. Does this work better for small and large numbers?
#+BEGIN_SRC scheme
(define (average x y) (/ (+ x y) 2.0))
(define (square x) (* x x))
(define (sqrt x)
  (define (good-enough? cur-guess prev-guess)
    (<
     (/
      (abs (-
            (square cur-guess)
            (square prev-guess)))
      cur-guess)
     0.00001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter cur-guess prev-guess)
    (if (good-enough? cur-guess prev-guess)
        cur-guess
        (sqrt-iter (improve cur-guess) cur-guess)))
  (sqrt-iter x 1))
(define small-number 0.0004)
(square (sqrt small-number))
#+END_SRC

#+RESULTS:
: 0.00040000000203508615

* Exercise 1.8
Newton's method for cube roots is based on the fact that if y is an
approximation to the cube root of x, then a better approximation is given by the
value
$x/y2+2y / 3$

Use this formula to implement a cube-root procedure analogous to the square-root
procedure.

#+BEGIN_SRC scheme
(define (average x y) (/ (+ x y) 2.0))
(define (square x) (* x x))
(define (cube x) (* x x x))
(define (cube-root x)
  (define (good-enough? cur-guess prev-guess)
    (<
     (/
      (abs (-
            (cube cur-guess)
            (cube prev-guess)))
      cur-guess)
     0.00001))
  (define (improve guess)
    (/
     (+
      (/ x (* guess guess))
      (* 2 guess))
     3))
  (define (cube-root-iter cur-guess prev-guess)
    (if (good-enough? cur-guess prev-guess)
        cur-guess
        (cube-root-iter (improve cur-guess) cur-guess)))
  (cube-root-iter x 1))
(cube-root 8)
#+END_SRC

#+RESULTS:
: 2924589057414455997628748486344302660659444568515035832691536981815205108734035392466721543722163413122774557468854728821767876364850265468396425274062488291882915976613666017028153173929252110722329571630781048212425259613224555722129554293513080452740518671702639486552108710163055592762929830533690476972166125450626445129803941391772815538783287081448755694393644372836135903877763830267310029263052030343930428531748239301121462059139880929123416213758588585778920572720580920256146500359894997760216519061806408949046303105921130774880574881582743915414774848272258442593769563823625516479242653434927534350095148228974675571361404033057312458936582505114174284022676618506891992314655526378947078796249223124510095623050667496642087281132241160603052237122384070288584720650570023229343659973890920982865750952548735595716398639422572859500969146773854121660030723150668920729243862028594729389449987051753247939565656215726430817203477046423328200718412912626859788603571774606924332505407465126345290941916736146611345578649109136528854849835431864218198464667489691381111285309144370277066115913215131829497214653196846808499989657603436911213559751896135685673604065646770016960633581953497359266052188848948967682098664932443121444535208246455084375199213263060226142988761419379754121954124890218560960036929795206669505509520051345319719152104933464391737643381504864494657356407398586894288866398164378011828021903161429072313512085349478177372244567357183582088719997756581731089649113983403714218438609036136888636232553131504304299496004226696314187672271893191325752556928567426763523372025542248612684221080804203315096336022160674439659325938587606312157851373303686507934682815897076338402165775605315465058819806787617509392773994052231920181159004776391110896618064032857774034033520901891470299068776968970703634218661047176824843273254022213094394242275032678245963096649076659496995557773758446973306073274613602004284130316137328737126537538526370548258231436046202182054616968477729835379615335867320671505771827955550425300833779961116573868015670751594650331545531086491290849366911609585122426845269034573369737250476746236970835301874971851668107193939482215734072302198202484963069331604636256776750911938786469997034458087263054934756981910497196726546812102420629456263100369549007758912506207724770776095255665645068120611351095949014029626998023791491353189394623944987378678251707061004977104268424761005510677447364204807617803728113373210130475193266680269485197350846376140205221869828004845434261457271323986527353786555160525001612620360514677906464009574914198611107129344652136781644705710777329290163895935235367420679139576391527884263159636931265432377250316911473359916640747684013856749700155150141329060800780045949097818863402607637353820773127645091445425975660981783364149631012902226910221355734650218086634452577892189815182149895499827363396720356315064994987816692519333923296812360973393924080422416543620390130845692747486674852409371243322804260515540628452028520614544374217323655926449379050061577766186582469840167319826/1462294528707227998394898560586695700797766652517495630869818160791400698336523049738772759392981004938437083606717331534468531268045699760127042532806932345963681020668405971277640604946924145788217422554022145801847328342507019031664731523197967571964741141676163029350780749326861100475000268080383606664159315451686041236539474542102711616386385183122150672476706241370615136700274347952187402821022749747919303789940369995616701889076089322026735281038085159487653873260998465123252149895662489192281987120729867022901241110860327119743764440618378264724068155654517471683857991475512180360236994262457581246134194902507418294054708037129646035131196735885445619268980803228728072742818983577986046322475191592550483614648720347050613819296282781795949159208376076188717793966945727359530542921563005746604261107570498151569961879423525487194054636010514117696592980882958354589326122421985212447020957685109148300364822622218708723323020003447066594051870930263554951653889835986088596884422907438247307040398542319654130388761607722659677903891581271484182157030169950043826276642207374395076944234674425975046294853644603032123353512496078434100875864503986593525881526995017324099521837946511738257876800695528958137723015296265738342042233048323470445615786068502077878659088118329191340703003208494719025352018848443907701941789145883047444627580631816171784026260853355181285814428672178376011110960872406226825864997197961211472273308548880219875575918530894954965134329520368484791326572391350918091452875832822518901029923052772381078202442119341083481103783269267297148837333378459747718806760741044448034952454814910691367598045752134344738591924353408770008121089780766121903341662141001722578797424168042345665241282778156718591443231839992070638519422230807335627873392428807400376957588163179302536183771569794307695539263045052569596782704187706308723348576404180811384636261024117888817101084399315073686443665158127721413935098096902176348269091586990489339631269940655744521457108585755192274753836930925702186163546860352225891751601896623231537728604731359616453675641869646815495121850897923408262498140875321653400923476751415119122578069378768883491767253519316014003412424609249439271934871388176933501282072265366744093478126150999719290283878247652882972643562682602629362462891272434809564404034466566697056415699112858672790558581156234770998598357096952311281143097080744865213133102760221992122196116445836625789178774614343076092556112053806790151832539111132619533807954298531166740074570508131871907208039666266325549252847804303428811749352031790330419455966413007298954426516301680246345095610706031446431613179073770052413456969105814331945836287064393995200355321802180197028270694506724777548966802301632291229473640805252637521530432187047150737992367334818139081133063504583623106901364792424537849492986512258978264586438331670921304531445270831575825627929298536382253213094348204476554651355458969885521535163488876356228169038519675696389201540374809805085652353595673452956686060673320311030655765411298479200072561348249933917062025

#+RESULTS:
