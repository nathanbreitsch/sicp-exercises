#+TITLE: Chapter 1.1 Elements of Programming

* Exercise 1.1.1
Type expressions and let the interpreter evaluate
** 1
#+BEGIN_SRC elisp
10
#+END_SRC

#+RESULTS:
: 10
** 2
#+BEGIN_SRC elisp
(+ 5 3 4)
#+END_SRC

#+RESULTS:
: 12
** 3
#+BEGIN_SRC scheme
(- 9 1)
#+END_SRC

#+RESULTS:
: 8
** 4
#+BEGIN_SRC elisp
(/ 6 2)
#+END_SRC

#+RESULTS:
: 3
** 5
#+BEGIN_SRC elisp
(+
 (* 2 4)
 (- 4 6))
#+END_SRC

#+RESULTS:
: 6

* Exercise 1.2
Convert a mathematical expression into prefix form
#+BEGIN_SRC elisp
(/
 (+
  5
  4
  (-
   2
   3
   (+
    6
    (/ 4.0 5))))
 (*
  3
  (- 6 2)
  (- 2 7)))
#+END_SRC

#+RESULTS:
: -0.020000000000000004

* Exercise 1.1.2
 Below is a sequence of expressions.
 What is the result printed by the interpreter in response to each expression?
 Assume that the sequence is to be evaluated in the order in which it is
 presented.
 #+BEGIN_SRC scheme
(define a 3)
(define b (+ a 1))
(+ a b (* a b))
 #+END_SRC

 #+RESULTS:
 : 19

* Exercise 1.3

Define a procedure that takes three numbers as arguments and returns the sum of
the squares of the two larger numbers.
#+BEGIN_SRC scheme
(define (square-sum x y)
  (+
   (* x x)
   (* y y)))

(define (square-sum-larger a b c)
  (cond
    ((and (>= a c) (>= b c))
      (square-sum a b))
    ((and (>= a b) (>= c b))
      (square-sum a c))
    ((and (>= b a) (>= c a))
      (square-sum b c))))

(square-sum-larger 3 2 1)
#+END_SRC

#+RESULTS:
: 13
